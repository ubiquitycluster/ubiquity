---
# Copyright The Ubiquity Authors.
#
# Licensed under the Apache License, Version 2.0. Previously licensed under the Functional Source License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://github.com/ubiquitycluster/ubiquity/blob/main/LICENSE
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# This software was previously licensed under the Functional Source License but has now transitioned to an Apache 2.0 License
# as of June 2025.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Infiniband Drivers download and setup
  block:

    - name: Identify major and minor versions of Linux OS
      shell: |
        ls {{ role_path }}/files/data/os/BaseOS/Packages/r/rocky-release* | tr -d [:alpha:][=/=][=_=][===][=\"=] | cut -d '-' -f3
      register: os_release
      when: base_os in ["Rocky", "Fedora", "Ubuntu"]

    - name: Set OS version
      set_fact:
        os_version: "{{ os_release.stdout }}"
      when: os_release is defined

    # MLNX OFED BLOCK
    - name: Download and extract MLNX OFED ISO
      when: ofed.mlnx_enabled | bool
      block:
        - name: Set MLNX OFED version
          set_fact:
            mlnx_ver: "{{ ofed.mlnx_version.keys() | list | first }}"
          when: ofed.mlnx_version is defined

        - name: Download MLNX OFED ISO
          get_url:
            url: "https://content.mellanox.com/ofed/MLNX_OFED-{{ ofed.mlnx_version[mlnx_ver].version }}/MLNX_OFED_LINUX-{{ ofed.mlnx_version[mlnx_ver].version }}-rhel{{ base_os_version }}-{{ ansible_architecture }}.iso"
            dest: "{{ role_path }}/files/data/iso/MLNX_OFED_LINUX-{{ ofed.mlnx_version[mlnx_ver].version }}-rhel{{ base_os_version }}-{{ ansible_architecture }}.iso"
            checksum: "{{ ofed.mlnx_version[mlnx_ver].os[base_os][base_os_version].checksum }}"
          register: mlnxiso
          until: "'OK' in mlnxiso.msg or 'file already exists' in mlnxiso.msg"
          retries: 4

        - name: Extract MLNX OFED ISO
          command: >
            xorriso -osirrox on -indev {{ mlnxiso.dest }}
            -extract / {{ role_path }}/files/data/misc/ofed-{{ ofed.mlnx_version[mlnx_ver].version }}
          args:
            creates: "{{ role_path }}/files/data/misc/ofed-{{ ofed.mlnx_version[ofed.version].version }}/RPMS/repodata/repomd.xml"

    # DOCA OFED BLOCK
    - name: Download and extract DOCA OFED ISO
      when: ofed.doca_enabled | bool
      block:
        - name: Set DOCA OFED version
          set_fact:
            doca_ver: "{{ ofed.doca_version }}"

        - name: Download DOCA OFED ISO
          get_url:
            url: "https://your.doca.repo.com/ofed/DOCA_OFED-{{ doca_ver }}/DOCA_OFED_LINUX-{{ doca_ver }}-rhel{{ base_os_version }}-{{ ansible_architecture }}.iso"
            dest: "{{ role_path }}/files/data/iso/DOCA_OFED_LINUX-{{ doca_ver }}-rhel{{ base_os_version }}-{{ ansible_architecture }}.iso"
            # Replace this once you have checksum logic:
            checksum: "sha256:REPLACE_ME"
          register: docaiso
          until: "'OK' in docaiso.msg or 'file already exists' in docaiso.msg"
          retries: 4

        - name: Extract DOCA OFED ISO
          command: >
            xorriso -osirrox on -indev {{ docaiso.dest }}
            -extract / {{ role_path }}/files/data/misc/ofed-doca-{{ doca_ver }}
          args:
            creates: "{{ role_path }}/files/data/misc/ofed-doca-{{ doca_ver }}/RPMS/repodata/repomd.xml"

