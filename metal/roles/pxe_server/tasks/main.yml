---
# Copyright The Ubiquity Authors.
#
# Licensed under the Apache License, Version 2.0. Previously licensed under the Functional Source License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://github.com/ubiquitycluster/ubiquity/blob/main/LICENSE
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# This software was previously licensed under the Functional Source License but has now transitioned to an Apache 2.0 License
# as of June 2025.
# See the License for the specific language governing permissions and
# limitations under the License.

# PXE Server

- name: "PXE | Install Docker SDK for Python"
  ansible.builtin.pip:
    name: 
      - "docker==6.1.3"
      - "docker-compose"

- name: "PXE | Set boot image variables based on the distribution"
  set_fact:
    iso_url: "{{ images.Rocky[base_os_version].url }}"
    #iso_url: "{{ item.iso_url }}"
    iso_checksum: "{{ images.Rocky[base_os_version].checksum }}"
    #iso_checksum: "{{ item.iso_checksum }}"
  #loop:
  #  - { iso_url: "{{ iso_url_fedora }}", iso_checksum: "{{ iso_checksum_fedora }}" }
    #- { iso_url: "{{ iso_url_rhel }}", iso_checksum: "{{ iso_checksum_rhel }}" }
  #  - { iso_url: "{{ iso_url_rocky }}", iso_checksum: "{{ iso_checksum_rocky }}" }
  when: "base_os == 'Rocky'"

- name: "PXE | Set boot image variables based on the distribution"
  set_fact:
    iso_url: "{{ lookup('images', 'Fedora', base_os_version, 'url') }}"
    #iso_url: "{{ item.iso_url }}"
    iso_checksum: "{{ lookup('images', 'Fedora', base_os_version, 'checksum') }}"
    #iso_checksum: "{{ item.iso_checksum }}"
  when: "base_os == 'Fedora'"

- name: "PXE | Set boot image variables based on the distribution"
  set_fact:
    iso_url: "{{ lookup('images', 'RHEL', base_os_version, 'url') }}"
    #iso_url: "{{ item.iso_url }}"
    iso_checksum: "{{ lookup('images', 'RHEL', base_os_version, 'checksum') }}"
    #iso_checksum: "{{ item.iso_checksum }}"
  when: "base_os == 'RHEL'"

- name: Debug ISO download result
  debug:
    var: iso

- name: Debug iso url
  debug:
    msg: "Downloading ISO from {{ iso_url }}"

- name: Debug base_os
  debug:
    var: base_os

- name: "PXE | Download boot ISO using wget"
  ansible.builtin.command: >
    wget -O {{ role_path }}/files/data/iso/{{ iso_url | basename }} {{ iso_url }}
  args:
    creates: "{{ role_path }}/files/data/iso/{{ iso_url | basename }}"
  register: iso_download

#- name: "PXE | Download boot image"
#  ansible.builtin.get_url:
#    url: "https://download.rockylinux.org/vault/rocky/9.4/isos/x86_64/Rocky-9.4-x86_64-dvd.iso"
#    dest: "{{ role_path }}/files/data/iso/{{ iso_url | basename }}"
#    checksum: "{{ iso_checksum }}"
#    mode: 0644
#  register: iso
#  until: "'OK' in iso.msg or 'file already exists' in iso.msg"
#  retries: 4
#  delay: 5

- name: Debug ISO download result
  debug:
    var: iso

- name: "PXE | Extract boot image"
  ansible.builtin.command:
    cmd: "xorriso -osirrox on -indev {{ role_path }}/files/data/iso/{{ iso_url | basename }} -extract / {{ role_path }}/files/data/os"
    creates: "{{ role_path }}/files/data/os/.treeinfo"

- import_tasks: roles/pxe_server/tasks/infiniband.yml
  when:
    - ofed is defined
    - ofed.mlnx_enabled | bool or ofed.doca_enabled | bool

- name: "PXE | Generate dnsmasq config"
  ansible.builtin.template:
    src: dnsmasq.conf.j2
    dest: "{{ role_path }}/files/data/pxe-config/dnsmasq.conf"
    mode: 0644

- name: "PXE | Generate GRUB config"
  ansible.builtin.template:
    src: grub.cfg.j2
    dest: "{{ role_path }}/files/data/pxe-config/grub.cfg"
    mode: 0644

- name: "PXE | Update permissions for grubx64.efi"
  ansible.builtin.file:
    path: "{{ role_path }}/files/data/os/EFI/BOOT/grubx64.efi"
    owner: root
    group: root
    mode: 0755

- name: "PXE | Create hash from root password prompt to input in kickstart file"
  ansible.builtin.shell: |
    set -o pipefail
    echo "{{ root_pass }}" | openssl passwd -6 -in -
  register: root_pass_hash

- name: "PXE | Set init config template based on the distribution"
  set_fact:
    init_config_template: "{{ item.init_config_template }}"
  loop:
    - { init_config_template: "kickstart.ks.j2" }
    - { init_config_template: "kickstart.ks.j2" }
    - { init_config_template: "kickstart_rocky.ks.j2" }
  when: base_os in ['Fedora', 'RHEL', 'Rocky']

- name: "PXE | Generate init config for each machine"
  ansible.builtin.template:
    src: "{{ init_config_template }}"
    dest: "{{ role_path }}/files/data/init-config/{{ hostvars[item]['mac'] }}.ks"
    mode: 0644
  loop: "{{ groups['metal'] }}"
  when: base_os in ['Fedora', 'RHEL', 'Rocky']

- name: "PXE | Add hashed root password to kickstart config file"
  become: false
  ansible.builtin.lineinfile:
    path: "{{ role_path }}/files/data/init-config/{{ hostvars[item]['mac'] }}.ks"
    insertafter: "# Root Password"
    line: "rootpw --iscrypted {{ root_pass_hash.stdout }}"
  loop: "{{ groups['metal'] }}"
  when: base_os in ['Fedora', 'RHEL', 'Rocky']

- name: "PXE | Start the ephemeral PXE server"
  community.docker.docker_compose:
    project_src: "{{ role_path }}/files"
    state: present
    restarted: true
    build: true
