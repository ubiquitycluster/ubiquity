# Copyright The Ubiquity Authors.
#
# Licensed under the Apache License, Version 2.0. Previously licensed under the Functional Source License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://github.com/ubiquitycluster/ubiquity/blob/main/LICENSE
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# This software was previously licensed under the Functional Source License but has now transitioned to an Apache 2.0 License
# as of June 2025.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Tasks file for kernel module hardening
- name: "Hardening | Populate service facts"
  ansible.builtin.service_facts:

- name: "Hardening | Gather the package facts"
  ansible.builtin.package_facts:
    manager: auto

# CIS 1.1.22
- name: "Hardening | Disable Automounting (scored)"
  block:
    - name: "Hardening | Check autofs status"
      ansible.builtin.systemd:
        name: autofs.service
      register: autofs_service_status
 
    - name: "Hardening | Disable service autofs"
      ansible.builtin.systemd:
        name: autofs.service
        enabled: 'no'
        state: stopped
  when: '"autofs.service" in ansible_facts.services and "autofs" in ansible_facts.packages'

# STIG 020110
- name: "Hardening | Disable kdump"
  block:
    - name: "Hardening | Check kdump status"
      ansible.builtin.systemd:
        name: kdump.service
      register: kdump_service_status

    - name: "Hardening | Disable service kdump"
      ansible.builtin.systemd:
        name: kdump.service
        enabled: 'no'
        state: stopped
  when: '"kdump.service" in ansible_facts.services and "kdump" in ansible_facts.packages'

- name: "Hardening | Install modprobe to disable filesystems"
  ansible.builtin.package:
    name: '{{ modprobe_package }}'
    state: 'present'

- name: "Hardening | Check if efi is installed"
  ansible.builtin.stat:
    path: "/sys/firmware/efi"
  register: efi_installed

- name: "Hardening | Remove vfat from fs-list if efi is used"
  ansible.builtin.set_fact:
    os_unused_filesystems: "{{ os_unused_filesystems | difference('vfat') }}"
  when:
    - efi_installed.stat.isdir is defined
    - efi_installed.stat.isdir

- name: "Hardening | Remove used filesystems from fs-list"
  ansible.builtin.set_fact:
    os_unused_filesystems: "{{ os_unused_filesystems | difference(ansible_mounts | map(attribute='fstype') | list) }}"
  when: not ((ansible_facts.os_family in ['Oracle Linux', 'RedHat']) and ansible_facts.distribution_major_version < '7')

- name: "Hardening | Disable unused modules"
  ansible.builtin.template:
    src: 'modprobe_modules.j2'
    dest: '/etc/modprobe.d/blacklist-modules.conf'
    owner: 'root'
    group: 'root'
    mode: '0600'

- name: "Hardening | Disable unused filesystems"
  ansible.builtin.template:
    src: 'modprobe_filesystems.j2'
    dest: '/etc/modprobe.d/blacklist-filesystems.conf'
    owner: 'root'
    group: 'root'
    mode: '0600'

...
