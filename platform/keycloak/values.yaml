---
# Copyright The Ubiquity Authors.
#
# Licensed under the Apache License, Version 2.0. Previously licensed under the Functional Source License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://github.com/ubiquitycluster/ubiquity-open/blob/main/LICENSE
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# This software was previously licensed under the Functional Source License but has now transitioned to an Apache 2.0 License
# as of June 2025.
# See the License for the specific language governing permissions and
# limitations under the License.

keycloak:
  image:
    tag: 18.0.2-legacy
  replicas: 3
  nodeSelector:
    node-role.kubernetes.io/master: "true"
  extraEnv: |
    - name: KEYCLOAK_USER
      value: admin
    - name: KEYCLOAK_PASSWORD
      value: changeme
    - name: JGROUPS_DISCOVERY_PROTOCOL
      value: kubernetes.KUBE_PING
    - name: KUBERNETES_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: JGROUPS_DISCOVERY_PROPERTIES
      value: port_range=0,dump_requests=true
    - name: KEYCLOAK_STATISTICS
      value: "true"
    - name: CACHE_OWNERS_COUNT
      value: "2"
    - name: CACHE_OWNERS_AUTH_SESSIONS_COUNT
      value: "2"
      #    - name: DB_USER_FILE
      #      value: /secrets/db-creds/user
      #    - name: DB_PASSWORD_FILE
      #      value: /secrets/db-creds/password
            #########
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: JAVA_OPTS
      value: >-
        -Dkeycloak.profile=preview -XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0 
        -Djava.net.preferIPv4Stack=true 
        -Djava.awt.headless=true 
        -Dtrust_all_cert=true
        -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true
        -Djavax.net.ssl.trustStore=/keystore/cacerts.jks
        -Djavax.net.ssl.trustStorePassword=ubiquity
    - name: KEYCLOAK_IMPORT
      value: /realm/realm.json

  startupScripts:
    hello.sh: |
      #!/bin/sh
      echo '********************************************************************************'
      echo '*                                                                              *'
      echo '*                        Hello from my startup script!                         *'
      echo '*                                                                              *'
      echo '********************************************************************************'
  lifecycleHooks: |
    postStart:
      exec:
        command:
          - /bin/sh
          - -c
          - echo 'Hello from lifecycle hook!'

            #  persistence:
            #    enabled: true
            #    ## If defined, storageClassName: <storageClass>.
            #    ## If set to "-", storageClassName: "", which disables dynamic provisioning.
            #    ## If undefined (the default) or set to null, no storageClassName spec is
            #    ## set, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).
            #    storageClass: "longhorn"
            #    size: 10Gi
            #    #existingClaim: ""
            #    annotations: {}

  extraVolumeMounts: |
    - name: realm-secret
      mountPath: "/realm/"
      readOnly: true
    - name: cert-keystore
      mountPath: "/keystore/"
      readOnly: true
          #    - name: db-creds
          #      mountPath: /secrets/db-creds
          #      readOnly: true

  extraVolumes: |
    - name: realm-secret
      secret:
        secretName: realm-secret
    - name: cert-keystore
      configMap:
        name: cert-keystore
          #    - name: db-creds
          #      secret:
          #        secretName: keycloak-db-creds
  service:
    type: ClusterIP
    metadata:
      name: keycloak
      labels:
        app: keycloak
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      # See ../docs/reference/ingress.md for more information
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/session-cookie-name: route
      nginx.ingress.kubernetes.io/session-cookie-expires: '172800'
      nginx.ingress.kubernetes.io/session-cookie-max-age: '172800'
      #cert-manager.io/cluster-issuer:
      # enables cert-manager to issue a certificate for this ingress.
      # if you want to use a self-signed certificate, comment out the line below
      # and uncomment the line below that.
      cert-manager.io/cluster-issuer: pebble-issuer
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      hajimari.io/appName: Keycloak
      hajimari.io/icon: key-chain
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    rules:
    - host: keycloak.ubiquitycluster.uk
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: keycloak
    tls:
    - secretName: keycloak-tls-certificate
      hosts:
      - keycloak.ubiquitycluster.uk
  postgresql:
    enabled: true
    persistence:
      enabled: true
      storageClass: longhorn
      size: 10Gi

  autoscaling:
    # If `true`, a autoscaling/v2beta2 HorizontalPodAutoscaler resource is created (requires Kubernetes 1.18 or above)
    # Autoscaling seems to be most reliable when using KUBE_PING service discovery (see README for details)
    # This disables the `replicas` field in the StatefulSet
    enabled: false
    # Additional HorizontalPodAutoscaler labels
    labels: {}
    # The minimum and maximum number of replicas for the Keycloak StatefulSet
    minReplicas: 3
    maxReplicas: 10
    # The metrics to use for scaling
    metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    # The scaling policy to use. This will scale up quickly but only scale down a single Pod per 5 minutes.
    # This is important because caches are usually only replicated to 2 Pods and if one of those Pods is terminated this will give the cluster time to recover.
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
        - type: Pods
          value: 1
          periodSeconds: 300
