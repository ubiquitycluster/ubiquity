name: Build and Push Opus Images

on:
  push:
    branches:
      - main
    paths:
      - 'opus/**'
  pull_request:
    branches:
      - main
    paths:
      - 'opus/**'
  workflow_dispatch:
    inputs:
      ansible_version:
        description: 'Ansible version to build'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: opus

jobs:
  # Stage 1: Build the base opus-builder image
  build-opus-builder:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      ansible-version: ${{ steps.set-version.outputs.ansible-version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set Ansible version
        id: set-version
        run: echo "ansible-version=${{ inputs.ansible_version || 'latest' }}" >> $GITHUB_OUTPUT
      
      - name: Build opus-builder image
        working-directory: ./opus
        run: |
          make build ANSIBLE=${{ steps.set-version.outputs.ansible-version }}
          docker tag localhost/opus-builder:${{ steps.set-version.outputs.ansible-version }} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ steps.set-version.outputs.ansible-version }}
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ steps.set-version.outputs.ansible-version }}

  # Stage 2: Build the tools image (depends on opus-builder)
  build-tools:
    runs-on: ubuntu-latest
    needs: build-opus-builder
    permissions:
      contents: read
      packages: write
    outputs:
      ansible-version: ${{ needs.build-opus-builder.outputs.ansible-version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull opus-builder image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ needs.build-opus-builder.outputs.ansible-version }}
          docker tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ needs.build-opus-builder.outputs.ansible-version }} localhost/opus-builder:${{ needs.build-opus-builder.outputs.ansible-version }}
      
      - name: Build and push tools image
        working-directory: ./opus
        run: |
          make build FLAVOUR=tools ANSIBLE=${{ needs.build-opus-builder.outputs.ansible-version }}
          docker tag localhost/opus:${{ needs.build-opus-builder.outputs.ansible-version }}-tools ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-opus-builder.outputs.ansible-version }}-tools
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-opus-builder.outputs.ansible-version }}-tools

  # Stage 3: Build infra, azure, and aws images in parallel (all depend on tools)
  build-cloud-images:
    runs-on: ubuntu-latest
    needs: build-tools
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        flavour: [infra, azure, aws]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull required base images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ needs.build-tools.outputs.ansible-version }}
          docker tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ needs.build-tools.outputs.ansible-version }} localhost/opus-builder:${{ needs.build-tools.outputs.ansible-version }}
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-tools.outputs.ansible-version }}-tools
          docker tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-tools.outputs.ansible-version }}-tools localhost/opus:${{ needs.build-tools.outputs.ansible-version }}-tools
      
      - name: Build and push ${{ matrix.flavour }} image
        working-directory: ./opus
        run: |
          make build FLAVOUR=${{ matrix.flavour }} ANSIBLE=${{ needs.build-tools.outputs.ansible-version }}
          docker tag localhost/opus:${{ needs.build-tools.outputs.ansible-version }}-${{ matrix.flavour }} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-tools.outputs.ansible-version }}-${{ matrix.flavour }}
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-tools.outputs.ansible-version }}-${{ matrix.flavour }}

  # Stage 4: Build awsk8s (depends on aws)
  build-awsk8s:
    runs-on: ubuntu-latest
    needs: [build-tools, build-cloud-images]
    permissions:
      contents: read
      packages: write
    outputs:
      ansible-version: ${{ needs.build-tools.outputs.ansible-version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull required base images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ needs.build-tools.outputs.ansible-version }}
          docker tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ needs.build-tools.outputs.ansible-version }} localhost/opus-builder:${{ needs.build-tools.outputs.ansible-version }}
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-tools.outputs.ansible-version }}-aws
          docker tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-tools.outputs.ansible-version }}-aws localhost/opus:${{ needs.build-tools.outputs.ansible-version }}-aws
      
      - name: Build and push awsk8s image
        working-directory: ./opus
        run: |
          make build FLAVOUR=awsk8s ANSIBLE=${{ needs.build-tools.outputs.ansible-version }}
          docker tag localhost/opus:${{ needs.build-tools.outputs.ansible-version }}-awsk8s ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-tools.outputs.ansible-version }}-awsk8s
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-tools.outputs.ansible-version }}-awsk8s

  # Stage 5: Build awskops and awshelm (both depend on awsk8s)
  build-aws-helm-images:
    runs-on: ubuntu-latest
    needs: build-awsk8s
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - flavour: awskops
            helm: ""
          - flavour: awshelm
            helm: "3.10"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull required base images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ needs.build-awsk8s.outputs.ansible-version }}
          docker tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ needs.build-awsk8s.outputs.ansible-version }} localhost/opus-builder:${{ needs.build-awsk8s.outputs.ansible-version }}
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-awsk8s.outputs.ansible-version }}-awsk8s
          docker tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-awsk8s.outputs.ansible-version }}-awsk8s localhost/opus:${{ needs.build-awsk8s.outputs.ansible-version }}-awsk8s
      
      - name: Build and push ${{ matrix.flavour }} image
        working-directory: ./opus
        run: |
          if [ -n "${{ matrix.helm }}" ]; then
            make build FLAVOUR=${{ matrix.flavour }} HELM=${{ matrix.helm }} ANSIBLE=${{ needs.build-awsk8s.outputs.ansible-version }}
            LOCAL_TAG="localhost/opus:${{ needs.build-awsk8s.outputs.ansible-version }}-${{ matrix.flavour }}-all-helm${{ matrix.helm }}"
            REMOTE_TAG="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-awsk8s.outputs.ansible-version }}-${{ matrix.flavour }}-helm${{ matrix.helm }}"
          else
            make build FLAVOUR=${{ matrix.flavour }} ANSIBLE=${{ needs.build-awsk8s.outputs.ansible-version }}
            LOCAL_TAG="localhost/opus:${{ needs.build-awsk8s.outputs.ansible-version }}-${{ matrix.flavour }}"
            REMOTE_TAG="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-awsk8s.outputs.ansible-version }}-${{ matrix.flavour }}"
          fi
          docker tag "${LOCAL_TAG}" "${REMOTE_TAG}"
          docker push "${REMOTE_TAG}"

  # Stage 6: Build the final opus image (depends on previous stages)
  build-opus:
    runs-on: ubuntu-latest
    needs: [build-awsk8s, build-aws-helm-images]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull required base images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ needs.build-awsk8s.outputs.ansible-version }}
          docker tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-builder:${{ needs.build-awsk8s.outputs.ansible-version }} localhost/opus-builder:${{ needs.build-awsk8s.outputs.ansible-version }}
          # Pull any other required intermediate images as needed by the opus build
      
      - name: Build and push opus image
        working-directory: ./opus
        run: |
          make build FLAVOUR=opus HELM=3.10 ANSIBLE=${{ needs.build-awsk8s.outputs.ansible-version }}
          docker tag localhost/opus:${{ needs.build-awsk8s.outputs.ansible-version }}-opus-all-helm3.10 ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-awsk8s.outputs.ansible-version }}-opus-all-helm3.10
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-awsk8s.outputs.ansible-version }}-opus-all-helm3.10
          
          # Also tag as latest if this is a main branch push
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag localhost/opus:${{ needs.build-awsk8s.outputs.ansible-version }}-opus-all-helm3.10 ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          fi

  test:
    runs-on: ubuntu-latest
    needs: build-opus
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        flavour:
          - { name: "tools", suffix: "tools" }
          - { name: "aws", suffix: "aws" }
          - { name: "opus", suffix: "opus-all-helm3.10" }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Test Docker image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.flavour.suffix }}"
          docker run --rm "${IMAGE}" ansible --version
          docker run --rm "${IMAGE}" python3 --version

  security-scan:
    runs-on: ubuntu-latest
    needs: build-opus
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
